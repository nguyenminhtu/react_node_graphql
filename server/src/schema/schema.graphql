scalar Upload

type Query {
  users: [User]
  invitations: [Invitation]
  addresses: [Address]
  userProfile(_id: String!): User
  currentUserProfile: User
  invitationDetail(_id: String!): Invitation
}

type Mutation {
  init: String
  reset: String

  updateUser(
    displayName: String
    userName: String
    password: String
    categories: [String]
  ): User
  deleteUser(_id: String!): User

  createInvitation(
    title: String
    description: String
    files: [Upload]
    lat: String
    lng: String
    address: String
    categories: [String]
  ): Invitation
  updateInvitation(
    _id: String!
    title: String
    description: String
    files: [Upload]
    lat: String
    lng: String
    address: String
    categories: [String]
  ): Invitation

  createAddress(
    title: String
    address: String
    lat: String
    lng: String
  ): Address

  createCategory(name: String): Category

  signin(userName: String!, password: String!): AuthPayload
  signup(
    userName: String!
    displayName: String!
    password: String!
  ): AuthPayload
}

type User {
  _id: String
  displayName: String
  userName: String
  addresses: [Address]
  categories: [Category]
  invitations: [Invitation]
}

type Address {
  _id: String
  title: String
  address: String
  user: User
  location: Location
}

type Image {
  _id: String
  path: String
}

type Category {
  _id: String
  name: String
}

type Invitation {
  _id: String
  title: String
  description: String
  user: User
  images: [Image]
  address: Address
  categories: [Category]
}

type AuthPayload {
  token: String
}

type Location {
  type: String
  coordinates: [Float]
}
